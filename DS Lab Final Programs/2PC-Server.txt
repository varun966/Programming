//	Two Phase Commit protocol: Server Application
import java.io.*;
import java.net.*;

public class Server {

    public static ServerSocket ss;

    public Server() {
	}
    public static void main(String args[]) throws Exception {
        ss = new ServerSocket(8088);//***************** create serversocket
		System.out.println("Two Phase Commit Protocol: Server");
		new Clients(2); //***************** creating num of participating clients
        while (true) {
            System.out.println("Server waiting: ");
            Socket s = ss.accept(); //***************** waitng for clients
			new Coordinator(s);//***************** creating coordinator instance
        }
    }
}

class Clients {
    static int n;
    static String[] status;

    Clients(int num) {//***************** creating string objects for clients' statuses
        n = num;
        status = new String[n];
        for (int j = 0; j < n; j++) {
            status[j] = new String("");
        }
    }
}

class Coordinator implements Runnable {

    public static int i = -1;
    int flag = 1;
    Socket s;
    Thread t;
    MulticastSocket ms = null;//*****************
    InetAddress group;//*****************
	DataInputStream input;
	DataOutputStream output;
	int port = 8890;
	String groupIP = "228.5.6.200";//*****************
    Coordinator(Socket c) {
        s = c;
		try {
			input = new DataInputStream(s.getInputStream());
			output = new DataOutputStream(s.getOutputStream());
			ms = new MulticastSocket(port);
            group = InetAddress.getByName(groupIP);//*****************
            ms.joinGroup(group);//*****************
        } catch (Exception e) {
            e.printStackTrace();
        }
		t = new Thread(this);//*****************
        t.start();
        i++;
    }

    public void run() {
        int index = i;//*****************
        String clientStatus;
        try {
            while (true) {
                clientStatus = input.readUTF();//***************** read client satauts
				if (clientStatus.equalsIgnoreCase("Prepared")) {
					output.writeUTF("Wait for others to prepare");
				}
                Clients.status[index] = new String(clientStatus);//*****************assign the client status to the array location 
                for (int k = 0; k < Clients.n; k++) {//***************** check if all the clients' status is prepared
                    System.out.println("Client " + (k + 1) + " " + Clients.status[k]);
                    if (Clients.status[k].equalsIgnoreCase("Prepared")) {
                        continue;
                    } else {
                        flag = 0;
                    }
                }
                if (flag == 1) {//***************** if flag value is 1 (means all the clients statuses is prepared)
                    byte[] msg = new String("commit").getBytes();
                    DatagramPacket msgpack = new DatagramPacket(msg, msg.length, group, port);
                    ms.send(msgpack);//***************** then send (muliticast the commit msg to all the client)
                    System.out.println("Commit message sent to clients: " + new String(msg));
                }
                flag = 1;//***************** make flag to 1 for next cycle
            }
        } catch (Exception e) {
            e.printStackTrace();
        }}
}